{"ast":null,"code":"/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\n\nimport invariant from 'fbjs/lib/invariant';\nimport TaskQueue from './TaskQueue';\nimport EventEmitter from '../../vendor/react-native/vendor/emitter/EventEmitter';\nimport requestIdleCallback from '../../modules/requestIdleCallback';\nvar _emitter = new EventEmitter();\nvar InteractionManager = {\n  Events: {\n    interactionStart: 'interactionStart',\n    interactionComplete: 'interactionComplete'\n  },\n  /**\r\n   * Schedule a function to run after all interactions have completed.\r\n   */\n  runAfterInteractions(task) {\n    var tasks = [];\n    var promise = new Promise(resolve => {\n      _scheduleUpdate();\n      if (task) {\n        tasks.push(task);\n      }\n      tasks.push({\n        run: resolve,\n        name: 'resolve ' + (task && task.name || '?')\n      });\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: promise.then.bind(promise),\n      cancel: () => {\n        _taskQueue.cancelTasks(tasks);\n      }\n    };\n  },\n  /**\r\n   * Notify manager that an interaction has started.\r\n   */\n  createInteractionHandle() {\n    _scheduleUpdate();\n    var handle = ++_inc;\n    _addInteractionSet.add(handle);\n    return handle;\n  },\n  /**\r\n   * Notify manager that an interaction has completed.\r\n   */\n  clearInteractionHandle(handle) {\n    invariant(!!handle, 'Must provide a handle to clear.');\n    _scheduleUpdate();\n    _addInteractionSet.delete(handle);\n    _deleteInteractionSet.add(handle);\n  },\n  addListener: _emitter.addListener.bind(_emitter),\n  /**\r\n   *\r\n   * @param deadline\r\n   */\n  setDeadline(deadline) {\n    _deadline = deadline;\n  }\n};\nvar _interactionSet = new Set();\nvar _addInteractionSet = new Set();\nvar _deleteInteractionSet = new Set();\nvar _taskQueue = new TaskQueue({\n  onMoreTasks: _scheduleUpdate\n});\nvar _nextUpdateHandle = 0;\nvar _inc = 0;\nvar _deadline = -1;\n\n/**\r\n * Schedule an asynchronous update to the interaction state.\r\n */\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      _nextUpdateHandle = setTimeout(_processUpdate);\n    } else {\n      _nextUpdateHandle = requestIdleCallback(_processUpdate);\n    }\n  }\n}\n\n/**\r\n * Notify listeners, process queue, etc\r\n */\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n  var interactionCount = _interactionSet.size;\n  _addInteractionSet.forEach(handle => _interactionSet.add(handle));\n  _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));\n  var nextInteractionCount = _interactionSet.size;\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n  if (nextInteractionCount === 0) {\n    // It seems that we can't know the running time of the current event loop,\n    // we can only calculate the running time of the current task queue.\n    var begin = Date.now();\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n      if (_deadline > 0 && Date.now() - begin >= _deadline) {\n        _scheduleUpdate();\n        break;\n      }\n    }\n  }\n  _addInteractionSet.clear();\n  _deleteInteractionSet.clear();\n}\nexport default InteractionManager;","map":{"version":3,"names":["invariant","TaskQueue","EventEmitter","requestIdleCallback","_emitter","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","tasks","promise","Promise","resolve","_scheduleUpdate","push","run","name","_taskQueue","enqueueTasks","then","bind","done","cancel","cancelTasks","createInteractionHandle","handle","_inc","_addInteractionSet","add","clearInteractionHandle","delete","_deleteInteractionSet","addListener","setDeadline","deadline","_deadline","_interactionSet","Set","onMoreTasks","_nextUpdateHandle","setTimeout","_processUpdate","interactionCount","size","forEach","nextInteractionCount","emit","begin","Date","now","hasTasksToProcess","processNext","clear"],"sources":["C:/Users/ASUS/OneDrive/Documents/GitHub/tranquilizer-/FRONTEND/node_modules/react-native-web/dist/exports/InteractionManager/index.js"],"sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\n\r\nimport invariant from 'fbjs/lib/invariant';\r\nimport TaskQueue from './TaskQueue';\r\nimport EventEmitter from '../../vendor/react-native/vendor/emitter/EventEmitter';\r\nimport requestIdleCallback from '../../modules/requestIdleCallback';\r\nvar _emitter = new EventEmitter();\r\nvar InteractionManager = {\r\n  Events: {\r\n    interactionStart: 'interactionStart',\r\n    interactionComplete: 'interactionComplete'\r\n  },\r\n  /**\r\n   * Schedule a function to run after all interactions have completed.\r\n   */\r\n  runAfterInteractions(task) {\r\n    var tasks = [];\r\n    var promise = new Promise(resolve => {\r\n      _scheduleUpdate();\r\n      if (task) {\r\n        tasks.push(task);\r\n      }\r\n      tasks.push({\r\n        run: resolve,\r\n        name: 'resolve ' + (task && task.name || '?')\r\n      });\r\n      _taskQueue.enqueueTasks(tasks);\r\n    });\r\n    return {\r\n      then: promise.then.bind(promise),\r\n      done: promise.then.bind(promise),\r\n      cancel: () => {\r\n        _taskQueue.cancelTasks(tasks);\r\n      }\r\n    };\r\n  },\r\n  /**\r\n   * Notify manager that an interaction has started.\r\n   */\r\n  createInteractionHandle() {\r\n    _scheduleUpdate();\r\n    var handle = ++_inc;\r\n    _addInteractionSet.add(handle);\r\n    return handle;\r\n  },\r\n  /**\r\n   * Notify manager that an interaction has completed.\r\n   */\r\n  clearInteractionHandle(handle) {\r\n    invariant(!!handle, 'Must provide a handle to clear.');\r\n    _scheduleUpdate();\r\n    _addInteractionSet.delete(handle);\r\n    _deleteInteractionSet.add(handle);\r\n  },\r\n  addListener: _emitter.addListener.bind(_emitter),\r\n  /**\r\n   *\r\n   * @param deadline\r\n   */\r\n  setDeadline(deadline) {\r\n    _deadline = deadline;\r\n  }\r\n};\r\nvar _interactionSet = new Set();\r\nvar _addInteractionSet = new Set();\r\nvar _deleteInteractionSet = new Set();\r\nvar _taskQueue = new TaskQueue({\r\n  onMoreTasks: _scheduleUpdate\r\n});\r\nvar _nextUpdateHandle = 0;\r\nvar _inc = 0;\r\nvar _deadline = -1;\r\n\r\n/**\r\n * Schedule an asynchronous update to the interaction state.\r\n */\r\nfunction _scheduleUpdate() {\r\n  if (!_nextUpdateHandle) {\r\n    if (_deadline > 0) {\r\n      _nextUpdateHandle = setTimeout(_processUpdate);\r\n    } else {\r\n      _nextUpdateHandle = requestIdleCallback(_processUpdate);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Notify listeners, process queue, etc\r\n */\r\nfunction _processUpdate() {\r\n  _nextUpdateHandle = 0;\r\n  var interactionCount = _interactionSet.size;\r\n  _addInteractionSet.forEach(handle => _interactionSet.add(handle));\r\n  _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));\r\n  var nextInteractionCount = _interactionSet.size;\r\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\r\n    _emitter.emit(InteractionManager.Events.interactionComplete);\r\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\r\n    _emitter.emit(InteractionManager.Events.interactionStart);\r\n  }\r\n  if (nextInteractionCount === 0) {\r\n    // It seems that we can't know the running time of the current event loop,\r\n    // we can only calculate the running time of the current task queue.\r\n    var begin = Date.now();\r\n    while (_taskQueue.hasTasksToProcess()) {\r\n      _taskQueue.processNext();\r\n      if (_deadline > 0 && Date.now() - begin >= _deadline) {\r\n        _scheduleUpdate();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  _addInteractionSet.clear();\r\n  _deleteInteractionSet.clear();\r\n}\r\nexport default InteractionManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}