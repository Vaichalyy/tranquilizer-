{"ast":null,"code":"/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\n\nvar rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\nvar rtlLangs = new Set(['ae',\n// Avestan\n'ar',\n// Arabic\n'arc',\n// Aramaic\n'bcc',\n// Southern Balochi\n'bqi',\n// Bakthiari\n'ckb',\n// Sorani\n'dv',\n// Dhivehi\n'fa', 'far',\n// Persian\n'glk',\n// Gilaki\n'he', 'iw',\n// Hebrew\n'khw',\n// Khowar\n'ks',\n// Kashmiri\n'ku',\n// Kurdish\n'mzn',\n// Mazanderani\n'nqo',\n// N'Ko\n'pnb',\n// Western Punjabi\n'ps',\n// Pashto\n'sd',\n// Sindhi\n'ug',\n// Uyghur\n'ur',\n// Urdu\n'yi' // Yiddish\n]);\n\nvar cache = new Map();\n\n/**\r\n * Determine the writing direction of a locale\r\n */\nexport function isLocaleRTL(locale) {\n  var cachedRTL = cache.get(locale);\n  if (cachedRTL) {\n    return cachedRTL;\n  }\n  var isRTL = false;\n  // $FlowFixMe\n  if (Intl.Locale) {\n    // $FlowFixMe\n    var script = new Intl.Locale(locale).maximize().script;\n    isRTL = rtlScripts.has(script);\n  } else {\n    // Fallback to inferring from language\n    var lang = locale.split('-')[0];\n    isRTL = rtlLangs.has(lang);\n  }\n  cache.set(locale, isRTL);\n  return isRTL;\n}","map":{"version":3,"names":["rtlScripts","Set","rtlLangs","cache","Map","isLocaleRTL","locale","cachedRTL","get","isRTL","Intl","Locale","script","maximize","has","lang","split","set"],"sources":["C:/Users/ASUS/OneDrive/Documents/GitHub/tranquilizer-/FRONTEND/node_modules/react-native-web/dist/modules/useLocale/isLocaleRTL.js"],"sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\n\r\nvar rtlScripts = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);\r\nvar rtlLangs = new Set(['ae',\r\n// Avestan\r\n'ar',\r\n// Arabic\r\n'arc',\r\n// Aramaic\r\n'bcc',\r\n// Southern Balochi\r\n'bqi',\r\n// Bakthiari\r\n'ckb',\r\n// Sorani\r\n'dv',\r\n// Dhivehi\r\n'fa', 'far',\r\n// Persian\r\n'glk',\r\n// Gilaki\r\n'he', 'iw',\r\n// Hebrew\r\n'khw',\r\n// Khowar\r\n'ks',\r\n// Kashmiri\r\n'ku',\r\n// Kurdish\r\n'mzn',\r\n// Mazanderani\r\n'nqo',\r\n// N'Ko\r\n'pnb',\r\n// Western Punjabi\r\n'ps',\r\n// Pashto\r\n'sd',\r\n// Sindhi\r\n'ug',\r\n// Uyghur\r\n'ur',\r\n// Urdu\r\n'yi' // Yiddish\r\n]);\r\n\r\nvar cache = new Map();\r\n\r\n/**\r\n * Determine the writing direction of a locale\r\n */\r\nexport function isLocaleRTL(locale) {\r\n  var cachedRTL = cache.get(locale);\r\n  if (cachedRTL) {\r\n    return cachedRTL;\r\n  }\r\n  var isRTL = false;\r\n  // $FlowFixMe\r\n  if (Intl.Locale) {\r\n    // $FlowFixMe\r\n    var script = new Intl.Locale(locale).maximize().script;\r\n    isRTL = rtlScripts.has(script);\r\n  } else {\r\n    // Fallback to inferring from language\r\n    var lang = locale.split('-')[0];\r\n    isRTL = rtlLangs.has(lang);\r\n  }\r\n  cache.set(locale, isRTL);\r\n  return isRTL;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAC1G,IAAIC,QAAQ,GAAG,IAAID,GAAG,CAAC,CAAC,IAAI;AAC5B;AACA,IAAI;AACJ;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA,IAAI,EAAE,KAAK;AACX;AACA,KAAK;AACL;AACA,IAAI,EAAE,IAAI;AACV;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI,CAAC;AAAA,CACJ,CAAC;;AAEF,IAAIE,KAAK,GAAG,IAAIC,GAAG,EAAE;;AAErB;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,MAAM,EAAE;EAClC,IAAIC,SAAS,GAAGJ,KAAK,CAACK,GAAG,CAACF,MAAM,CAAC;EACjC,IAAIC,SAAS,EAAE;IACb,OAAOA,SAAS;EAClB;EACA,IAAIE,KAAK,GAAG,KAAK;EACjB;EACA,IAAIC,IAAI,CAACC,MAAM,EAAE;IACf;IACA,IAAIC,MAAM,GAAG,IAAIF,IAAI,CAACC,MAAM,CAACL,MAAM,CAAC,CAACO,QAAQ,EAAE,CAACD,MAAM;IACtDH,KAAK,GAAGT,UAAU,CAACc,GAAG,CAACF,MAAM,CAAC;EAChC,CAAC,MAAM;IACL;IACA,IAAIG,IAAI,GAAGT,MAAM,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/BP,KAAK,GAAGP,QAAQ,CAACY,GAAG,CAACC,IAAI,CAAC;EAC5B;EACAZ,KAAK,CAACc,GAAG,CAACX,MAAM,EAAEG,KAAK,CAAC;EACxB,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}